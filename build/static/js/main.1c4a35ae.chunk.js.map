{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","personObject","post","id","delete","put","Filter","value","eventHandler","onChange","PersonForm","props","onSubmit","submitEvent","nameValue","nameEvent","numberValue","numberEvent","type","Persons","personsToShow","deletePerson","map","person","key","name","number","onClick","window","confirm","ShowNotification","notification","message","className","App","useState","persons","setPersons","newName","setNewName","newPhoneNumber","setNewPhoneNumber","filterValue","setFilterValue","setPersonsToShow","setNotification","useEffect","loadAllPersons","timer","personsServices","returnedPersons","displayNotification","setTimeout","e","filter","toLowerCase","includes","target","preventDefault","duplicates","updateDisplay","newArray","length","returnedPerson","p","catch","error","concat","updatedPersons","n","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c4a35ae.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/contacts'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createPerson = (personObject) => {\r\n  const request = axios.post(baseUrl, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (id, personObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, createPerson, deletePerson, updatePerson }","import React, { useState, useEffect } from 'react'\r\nimport personsServices from './services/persons'\r\n\r\nconst Filter = ({value, eventHandler}) => (\r\n  <div>\r\n    filter shown with <input\r\n      value={value}\r\n      onChange={eventHandler} />\r\n  </div>\r\n)\r\n\r\nconst PersonForm = (props) => (\r\n  <form onSubmit={props.submitEvent}>\r\n    <div>\r\n      name: <input\r\n        value={props.nameValue}\r\n        onChange={props.nameEvent}/>\r\n    </div>\r\n    <div>\r\n      number: <input\r\n        value={props.numberValue}\r\n        onChange={props.numberEvent}/>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n)\r\n\r\nconst Persons = ({personsToShow, deletePerson}) => (\r\n  <>\r\n  {personsToShow.map(person =>\r\n    <div key={person.name}>\r\n      {person.name} {person.number}\r\n      <button onClick={() => {\r\n        if (window.confirm(`Delete ${person.name}?`))\r\n          return deletePerson(person)\r\n      }}>\r\n        delete\r\n      </button>\r\n    </div>)}\r\n  </>\r\n)\r\n\r\nconst ShowNotification = ({notification}) => {\r\n  if (notification.message===null) {\r\n    return null\r\n  }\r\n  \r\n  return (\r\n    <div className={notification.type}>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newPhoneNumber, setNewPhoneNumber ] = useState('')\r\n  const [ filterValue, setFilterValue ] = useState('')\r\n  const [ personsToShow, setPersonsToShow ] = useState(persons)\r\n  const [ notification, setNotification ] = useState({\r\n    message: null,\r\n    type: null\r\n  })\r\n\r\n  useEffect(() => {\r\n    loadAllPersons()\r\n  }, [])\r\n  \r\n  const loadAllPersons = () => {\r\n    personsServices\r\n      .getAll()\r\n      .then(returnedPersons => {\r\n        setPersons(returnedPersons)\r\n        setPersonsToShow(returnedPersons)\r\n      })\r\n  }\r\n  \r\n  let timer\r\n  const displayNotification = (message, type) => {\r\n    if (timer !== null)\r\n      timer = null\r\n\r\n    setNotification({\r\n      message: message,\r\n      type: type\r\n    })\r\n    timer = setTimeout(() => {\r\n      setNotification({\r\n        message: null,\r\n        type: null\r\n      })\r\n      timer = null\r\n    }, 5000)\r\n  }\r\n\r\n  const addPerson = (e) => {\r\n    e.preventDefault()\r\n\r\n    const duplicates = persons.filter(person => person.name === newName)\r\n    const personObject = {\r\n      name: newName,\r\n      number: newPhoneNumber\r\n    }\r\n    const updateDisplay = (newArray) => {\r\n      setPersons(newArray)\r\n      setPersonsToShow(newArray)\r\n      setFilterValue('')\r\n      setNewName('')\r\n      setNewPhoneNumber('')\r\n    }\r\n\r\n    if (duplicates.length !== 0){\r\n      if (window.confirm(`${personObject.name} is already added to phonebook, replace the old number with a new one?`)){\r\n        personsServices\r\n          .updatePerson(duplicates[0].id, personObject)\r\n          .then(returnedPerson => {\r\n            updateDisplay(persons.map(p => p.id !== duplicates[0].id ? p : returnedPerson))\r\n            displayNotification(`Changed number for ${returnedPerson.name} from ${duplicates[0].number} to ${returnedPerson.number}`, 'success')\r\n          })\r\n          .catch(error => {\r\n            displayNotification(`Information of ${personObject.name} has already been removed from the server`, 'error')\r\n            loadAllPersons()\r\n          })    \r\n      }\r\n    }\r\n    else {\r\n      personsServices\r\n      .createPerson(personObject)\r\n      .then(returnedPerson => {\r\n        updateDisplay(persons.concat(returnedPerson))\r\n        displayNotification(`Added ${returnedPerson.name}`, 'success')\r\n      })\r\n      .catch(error => {\r\n        displayNotification(`${error.response.data.error}`, 'error')\r\n      })\r\n    }\r\n  }\r\n\r\n  const deletePerson = (person) => {\r\n    personsServices\r\n      .deletePerson(person.id)\r\n      .then(returnedPerson => {\r\n        const updatedPersons = persons.filter(n => n.id !== person.id)\r\n        setPersons(updatedPersons)\r\n        setPersonsToShow(updatedPersons)\r\n        displayNotification(`Information of ${person.name} successfully removed`, 'success')\r\n      })\r\n      .catch(error => {\r\n        displayNotification(`Information of ${person.name} has already been removed from the server`, 'error')\r\n        loadAllPersons()\r\n      })\r\n  }\r\n\r\n  const newNameEvent = (e) => setNewName(e.target.value)\r\n  const newPhoneNumberEvent = (e) => setNewPhoneNumber(e.target.value)\r\n\r\n  const filterPersons = (e) => {\r\n    setPersonsToShow(persons.filter(person => person.name\r\n      .toLowerCase()\r\n      .includes(e.target.value.toLowerCase()))\r\n    )\r\n    return setFilterValue(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n        <ShowNotification notification={notification} />\r\n        <Filter value={filterValue} eventHandler={filterPersons} />\r\n      <h3>Add a new</h3>\r\n        <PersonForm\r\n          nameValue={newName} \r\n          nameEvent={newNameEvent} \r\n          numberValue={newPhoneNumber} \r\n          numberEvent={newPhoneNumberEvent} \r\n          submitEvent={addPerson}\r\n        />\r\n      <h3>Numbers</h3>\r\n        <Persons\r\n          personsToShow={personsToShow}\r\n          deletePerson={deletePerson}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}